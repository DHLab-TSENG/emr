---
title: "lab"
subtitle: "an R package for generating analysis-ready data from laboratory records"
author: "Yi-Ju Tseng, PhD @ DHLab NYCU"
editor: visual
date: 2023-05-12
format:
  revealjs:
    slide-number: true
    logo: https://user-images.githubusercontent.com/8377506/176842711-170e5e16-2d2e-498c-bb37-c1cc43760706.png
    footer: <DHLab @ NYCU>
slide-number: true
title-slide-attributes: 
  data-background-image: https://user-images.githubusercontent.com/8377506/176842711-170e5e16-2d2e-498c-bb37-c1cc43760706.png
  data-background-size: 15%
  data-background-position: 2% 2%
---

## Features

-   **Data Mapping**
    -   Standardize and manipulate data with LOINC
-   **Time Series Analysis**
    -   Separate lab test results into multiple consecutive non-overlapped time windows
-   **Value Imputation**
    -   Impute value to replace missing data
-   **Analysis Ready Data Generation**
    -   Transform longitudinal data into wide format

## Overview

<img src="https://raw.githubusercontent.com/DHLab-TSENG/lab/master/image/overview.jpg" style="display:block; margin:auto; width:100%;"/>

## Installation

```{r}
#| eval: false
#| echo: true
install.packages("remotes")
remotes::install_github("DHLab-TSENG/lab")
```

## Load packages

```{r}
#| echo: true
library(lab)
library(dxpr)
library(tidyverse)
library(data.table)
```

You need to install packages if you never use these packages

```{r}
#| echo: true
#| eval: false
install.packages("remotes")
remotes::install_github("DHLab-TSENG/dxpr")
install.packages("tidyverse")
install.packages("data.table")
```

# Learn from a real analysis case!

## Research question

-   Newborns who were diagnosed with patent ductus arteriosus (PDA)
-   Patients with and without **30-day in-hospital mortality**
-   The differences in the laboratory results between these two groups

# Data - MIMIC III

## Example data - from MIMIC III (1/2)

-   A large, **freely-available** database
-   Deidentified health-related data, over **40,000** patients
-   ICU of the Beth Israel Deaconess Medical Center, 2001-2012.
-   You must completing **CITI Data or Specimens Only Research** training
-   [MIMIC III](https://physionet.org/content/mimiciii/1.4/)

## Example data - from MIMIC III (2/2)

-   Demographics
-   Vital sign measurements made at the bedside
    -   \~1 data point/hr
-   Laboratory test results
-   Procedures
-   Medications
-   Caregiver notes, imaging reports
-   Mortality (including post-hospital discharge)

## Example data - newborn's data (1/2)

-   **Admission**: ADMISSIONS
    -   Unique hospitalization for each patient in the database `HADM_ID`
    -   Use to get a `SUBJECT_ID` list of **newborn**
-   **Diagnosis**: DIAGNOSES_ICD
    -   Coded using the **I**nternational Statistical **C**lassification of **D**iseases and Related Health Problems ('ICD') system
    -   Use to analyze comorbidity
-   [Coding book](https://mimic.mit.edu/docs/iii/tables/)

## Example data - newborn's data (2/2)

-   **Laboratory data**: LABEVENTS
    -   All laboratory measurements for a given patient
-   **Patient data**: PATIENTS
    -   Defines each SUBJECT_ID in the database
    -   Use `DOD_HOSP` to get the status of in-hospital mortality
-   [Coding book](https://mimic.mit.edu/docs/iii/tables/)

## Take a look of the example data (1/3)

From **DIAGNOSES_ICD** data, only for newborn

```{r}
#| echo: true
sampleNewborn<-readRDS("data/sampleNewborn.rds")
glimpse(sampleNewborn, width = 70)
```

[Coding book](https://mimic.mit.edu/docs/iii/tables/)

```{r}
#| echo: true
sampleNewborn %>%
  summarise(Subject=n_distinct(SUBJECT_ID),
            Admission=n_distinct(HADM_ID),
            TotalDiagnoses=n())
```

## Take a look of the example data (2/3)

From **LABEVENTS** data, only for newborn

```{r}
#| echo: true
PDALab<-readRDS("data/PDALab.rds")
LONICMap<-fread("data/D_LABITEMS.csv")
PDALabLONIC <- mapLOINC(labData = PDALab, 
                        labItemColName = ITEMID, 
                        mappingTable = LONICMap)
glimpse(PDALabLONIC, width = 70)
```

[Coding book](https://mimic.mit.edu/docs/iii/tables/)

```{r}
#| echo: true
PDALabLONIC %>%
  summarise(Subject=n_distinct(SUBJECT_ID),
            LabItem=n_distinct(ITEMID),
            TotalLabs=n())
```

## Take a look of the example data (3/3)

From **PATIENTS** data, only for newborn

```{r}
#| echo: true
PDAPatients<-readRDS("data/PDAPatients.rds")
PDAPatients<-PDAPatients %>% select(SUBJECT_ID,GENDER,DOD_HOSP)
glimpse(PDAPatients, width = 70)
```

[Coding book](https://mimic.mit.edu/docs/iii/tables/)

# Step 1. Select Target Cases

## Define your target

-   Research target: newborn who diagnosed with *Patent Ductus Arteriosus* (PDA)
-   The ICD-9 code for PDA is 747.0

![](figure/747.png)

[source](http://www.icd9data.com/2015/Volume1/740-759/747/default.htm)

## Select target cases from your data (1/2)

-   Use `selectCases()` from `dxpr`

-   provide the names of `patient ID`, `ICD`, and `date`

-   `icd10usingDate` = "9999/01/01" **The date start using ICD10**

-   `groupDataType` = ICD **Use ICD to select cases**

-   `caseCondition` = "\^7470" **ICD codes for cases**

-   `caseCount` = 1 **Most of the time we need more diagnoses**

-   `CaseName` = "PDA" **Name for the case group**

## Select target cases from your data (2/2)

```{r}
#| echo: true
Case <- selectCases(dxDataFile = sampleNewborn,
                    idColName = SUBJECT_ID,
                    icdColName = ICD9_CODE,
                    dateColName = ADMITTIME,
                    icd10usingDate = "9999/01/01",
                    groupDataType = ICD,
                    caseCondition = "^7470",
                    caseCount = 1,
                    caseName = "PDA")
PDA<-Case %>% filter(selectedCase=="PDA")
```

## Add death info to case list (1/2)

::: columns
::: {.column width="80%" style="font-size: 0.5em"}
```{r}
knitr::kable(PDA %>% select(ID, selectedCase, count, period, MostCommonICD))
```
:::

::: {.column width="20%" style="font-size: 0.5em"}
```{r}
knitr::kable(PDAPatients)
```
:::
:::

## Add death info to case list (2/2)

Merge 30-day in-hospital mortality info from **PATIENTS** data

```{r}
#| echo: true
PDA<-inner_join(PDA,PDAPatients,by=c("ID"="SUBJECT_ID"))
PDA$DeathDay<-
  difftime(PDA$DOD_HOSP,PDA$firstCaseDate,units = "days")
PDA$D30<-ifelse(PDA$DeathDay<=30,"Y","N")
PDA$D30<-ifelse(is.na(PDA$D30),"N",PDA$D30)
```

## Take a look of the data from 1 patient

```{r}
#| echo: true
PDA %>%
  filter(ID == 1456)
```

# Step 2. Laboratory Data Pre-processing

## Laboratory tests selection (1/2)

Select laboratory tests which were given to \>95% of individuals

```{r lab-filter95}
#| echo: true
PDAItem95<-
  PDALab %>% group_by(ITEMID) %>%
  summarise(Ind=n_distinct(SUBJECT_ID),
            Total=length(unique(PDALab$SUBJECT_ID)),
            Perc=Ind/Total) %>%
  arrange(desc(Perc)) %>%
  filter(Perc>0.95)
head(PDAItem95) # top 6 rows
```

## Laboratory tests selection (2/2)

Select laboratory tests which were given to \>95% of individuals

```{r lab-filter}
#| echo: true
PDALab95<-PDALab %>% filter(ITEMID %in% PDAItem95$ITEMID)
head(PDALab95) # top 6 rows
```

## LONIC Mapping (1/2)

-   Map laboratory item code (ITEMID) with LOINC.
-   The mapping table `LONICMap` is provided by [MIMIC](https://mimic.mit.edu/)
    -   `labData` = PDALab95 **Laboratory data**
    -   `labItemColName` = ITEMID **Laboratory item ID**
    -   `mappingTable` = LONICMap **LOINC table**

## LONIC Mapping (2/2)

```{r lonic-map}
#| echo: true
PDALabLONIC <- mapLOINC(labData = PDALab95, 
                        labItemColName = ITEMID, 
                        mappingTable = LONICMap)
head(PDALabLONIC) # top 6 rows
```

## Normal or Abnormal Test Results (1/6)

-   Reference range information `refLOINC` provided by LONIC

    -   The columns have LOINC codes should have the same name with your data

-   The `Patients` table is used to provide gender information

    -   reference ranges are different across gender

## Normal or Abnormal Test Results (2/6)

```{r}
#| echo: true
refLOINC
```

## Normal or Abnormal Test Results (3/6)

```{r}
#| echo: true
PDALabLONIC
```

## Normal or Abnormal Test Results (4/6)

```{r Ab-name}
#| echo: true
if(!"LOINC_CODE" %in% colnames(refLOINC)){
  refLOINC<-rename(refLOINC,LOINC_CODE=LOINC)
}
refLOINC
```

## Normal or Abnormal Test Results (5/6)

`getAbnormalMark` from lab package:

-   valueColName = VALUENUM
-   genderColName = GENDER
-   genderTable = PDAPatients
-   referenceTable = refLOINC

```{r Ab}
#| echo: true
PDALabLONIC_ab <- getAbnormalMark(labData = PDALabLONIC,
                                  idColName = SUBJECT_ID,
                                  labItemColName = LOINC_CODE,
                                  valueColName = VALUENUM,
                                  genderColName = GENDER,
                                  genderTable = PDAPatients,
                                  referenceTable = refLOINC)
```

## Normal or Abnormal Test Results (6/6)

```{r Ab2}
#| echo: true
head(PDALabLONIC_ab)
```

# Step 3. Laboratory Data Analysis - time series

## Width of Windows (1/4)

Decide a proper width of window for slicing laboratory records into time-series window

```{r index}
#| echo: true
PDAIndex<-PDA[,c("ID","firstCaseDate")]
colnames(PDAIndex)<-c("ID","indexDate")
PDAIndex
```

## Width of Windows (2/4)

`plotWindowProportion` helps users explore the proportion of missing values in each slicing window.

```{r window}
#| echo: true
windowProportion <- plotWindowProportion(labData = PDALabLONIC,
                                         idColName = SUBJECT_ID,
                                         labItemColName = LABEL,
                                         dateColName = CHARTTIME,
                                         indexDate = PDAIndex,
                                         gapDate = c(1, 3, 7, 14),
                                         studyPeriodStartDays=0,
                                         studyPeriodEndDays=31)
```

## Width of Windows (3/4)

-   Using 1 or 3 days window may generate large amount of missing records
-   Could affect the analysis results

```{r}
windowProportion$graph
```

## Width of Windows (4/4)

```{r}
#| echo: true
windowProportion$missingData
```

## Slice the Data into Time-series Window

We choose 7-day window in this analysis.

```{r time-series}
#| echo: true
timeSeriesData <- getTimeSeriesLab(labData = PDALabLONIC,
                                   idColName = SUBJECT_ID,
                                   labItemColName = LOINC_CODE + LABEL,
                                   dateColName = CHARTTIME,
                                   valueColName = VALUENUM,
                                   indexDate = PDAIndex,
                                   gapDate = 7,
                                   completeWindows = TRUE)
head(timeSeriesData) # top 6
```

## Time-series Visualization (1/2)

-   For some individuals which need further data exploration, users can visualize the time series data
-   We randomly choose 5 individuals in this use case

```{r time-series-plot}
#| echo: true
timeSeriesDataInd<- timeSeriesData %>% filter(ID %in% c(93,126))
timeSeriesPlot <- plotTimeSeriesLab(labData = timeSeriesDataInd,
                                    idColName = ID,
                                    labItemColName = LOINC_CODE + LABEL,
                                    timeMarkColName = Window,
                                    valueColName = Nearest,
                                    timeStart = 1,
                                    timeEnd  = 10,
                                    abnormalMarkColName = NULL)
```

## Time-series Visualization (2/2)

```{r}
timeSeriesPlot
```

## Analysis Ready Data Generation

```{r ADR}
#| echo: true
WideTimeSeriesData <- 
  wideTimeSeriesLab(labData = timeSeriesData,
                    idColName = ID,
                    labItemColName = LOINC_CODE+ LABEL,
                    windowColName = Window,
                    valueColName = Nearest)
head(WideTimeSeriesData) # top 6 rows
```

# Step 4. Laboratory Data Analysis - differences between groups

## Laboratory data in the analysis

```{r PDA analysis}
#| echo: true
PDAandLab<-
  inner_join(PDA,WideTimeSeriesData,by="ID")
var<-colnames(PDAandLab)[14:30]
var
```

## Compare Laboratory Results based on 30-day in-hospital mortality

-   Compare laboratory results in selected window (Ex. 1)
-   Between with and without 30-day in-hospital mortality groups

```{r tableone}
#| echo: true
library(tableone)
t1<-CreateTableOne(data=PDAandLab %>% filter(Window==1),
                   strata = c("D30"),
                   var=var)

```

## The table 1

Some results were different between two groups.

```{r}
t1
```

# Step 5. Other Pre-processing

## Missing Value Imputation (1/2)

-   Missing values are not allowed in some machine learning algorithms.
-   Impute the missing values with NOCB strategy (next observation carried backward) with `imputeTimeSeriesLab`

```{r impute}
#| echo: true
fullTimeSeriesData <- 
  imputeTimeSeriesLab(labData = timeSeriesData,
                      idColName = ID,
                      labItemColName = LOINC_CODE + LABEL,
                      windowColName = Window,
                      valueColName = Mean & Nearest,
                      impMethod = NOCB,
                      imputeOverallMean = FALSE)
```

## Missing Value Imputation (2/2)

```{r}
fullTimeSeriesData
```

## Generate analysis ready data

Convert the records into wide format

```{r ADRFull}
#| echo: true
FullWideTimeSeriesData <-
  wideTimeSeriesLab(
    labData = fullTimeSeriesData,
    idColName = ID,
    labItemColName = LOINC_CODE + LABEL,
    windowColName = Window,
    valueColName = Nearest
  )
head(FullWideTimeSeriesData)
```

# Step 6. Deep Learning Model Development with Analysis Ready Data

## Training and testing data (1/2)

Window =5

```{r LSTM-data}
#| echo: true
FullPDALab<-
  inner_join(PDA,FullWideTimeSeriesData,by="ID")
FullPDALab<-FullPDALab %>% filter(ID!=72)
TrainData<-FullPDALab %>% 
  filter(Window>0&Window<=5) %>% select(ID,Window,14:30)
TrainDataFill <- TrainData %>% tidyr::complete(ID, Window)
TrainDataFill<-TrainDataFill%>%replace(is.na(.), 0)
TrainDataFill<-TrainDataFill %>% arrange(Window,ID)
nPatient<-length(unique(TrainDataFill$ID))
```

## Training and testing data (2/2)

Data and label

```{r LSTM-data2}
#| echo: true
pureTrain<-TrainDataFill %>% select(-ID,-Window)
TrainArray<-array(unlist(pureTrain),
                  dim=c(nPatient,5,ncol(pureTrain)))
TrainTarget<-FullPDALab %>% arrange(ID) %>% select(ID,D30) %>% 
  unique() %>% pull(D30)
TrainTarget<-array(ifelse(TrainTarget=="Y",1,0))
TrainTargetFinal<-
  array(rep(TrainTarget,5),
        dim=c(nPatient,5,1))
```

## Install python and tensorflow & some packages
-   Install Python first (3.6 - 3.9) [Instruction](https://www.python.org/downloads/)
-   Install Tensorflow [Instruction](https://www.tensorflow.org/install)

```
python3 -m pip install --upgrade pip
```
For Macbook M2
```
python3 -m pip install tensorflow-macos
```


## Install some packages
-   You need to install `reticulate`, `keras` and `tensorflow` packages for deep learning model development

```{r keras-install}
#| echo: true
#| eval: false
install.packages("reticulate")
install.packages("keras")
install.packages("tensorflow")
```

```{r keras}
#| echo: true
library(reticulate)
library(keras)
library(tensorflow)
```

## Model development (1/3)

```{r LSTM}
#| echo: true
model <- keras_model_sequential()
model %>% layer_lstm(16, 
                     batch_input_shape = c(126, 5, ncol(pureTrain)),
                     return_sequences =TRUE, stateful= TRUE,
                     kernel_regularizer = regularizer_l2(0.001)) %>%
  layer_dropout(rate=0) %>%
  layer_dense(16,activation = 'relu') %>%
  layer_dense(1,activation = 'sigmoid')
model %>% compile(
  loss = 'binary_crossentropy',
  optimizer = 'adam',
  metrics= tensorflow::tf$keras$metrics$AUC())
```

## Model development (2/3)

```{r LSTM2}
#| echo: true
fit<-model %>% fit(
  x = TrainArray,
  y = TrainTargetFinal,
  batch_size = 126,
  epoch= 100 ,
  verbose = 1,
  shuffle = FALSE
)
```

## Model development (3/3)

```{r LSTM3}
#| echo: true
plot(fit)
```
